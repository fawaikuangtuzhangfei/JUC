1.公平锁、非公平锁
	公平锁就是类似于排队一样，按照先来后到的顺序
	非公平锁就是不存在排队，存在抢占，可能后到的比先来的先执行
可能会造成线程饥饿的情况
	synchronized和reentranlock都是非公平的,其中reentrantlock
可以通过构造函数来设置为公平还是非公平(默认false)
	非公平锁的吞吐量比公平的大
	
2.可重入锁(递归锁)
	线程可以进入任何一个它已经拥有锁的线程
	简单来说就是只要我获得了外层锁，里面的锁畅通无阻！
	synchronized和reentranlock都是典型的可重入锁
	最大的作用就是可以避免死锁！
	
3.自旋锁(cas)
	线程在操作的时候会先将目前的值于内存中的值进行比较
相等才进行操作，如果不相等就会一直循环请求，直至相等
	好处是减少了线程上下文的切换
	缺点是如果一直比较失败的话会一直自旋造成大量的cpu损耗
	
4.读写锁(写时独占 读时共享)
	独占锁就是只能一个线程拥有 比如sychronized ReentrantLock ReentrantReadWriteLock中的写锁
	共享锁就是多个线程可以共同拥有此锁 比如ReentrantReadWriteLock中的读锁
	读读 可 
	读写 不可
	写写 不可
	